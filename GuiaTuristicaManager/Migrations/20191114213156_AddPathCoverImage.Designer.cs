// <auto-generated />
using GuiaTuristicaManager.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GuiaTuristicaManager.Migrations
{
    [DbContext(typeof(CatalogContext))]
    [Migration("20191114213156_AddPathCoverImage")]
    partial class AddPathCoverImage
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.11-servicing-32099")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GuiaTuristicaManager.Models.Media", b =>
                {
                    b.Property<int>("MediaId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ModelId");

                    b.Property<string>("Name");

                    b.Property<string>("PathMedia");

                    b.Property<int>("Type");

                    b.HasKey("MediaId");

                    b.HasIndex("ModelId");

                    b.ToTable("Media");
                });

            modelBuilder.Entity("GuiaTuristicaManager.Models.Model", b =>
                {
                    b.Property<int>("ModelId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("PathModel");

                    b.Property<int>("PlaceId");

                    b.HasKey("ModelId");

                    b.HasIndex("PlaceId")
                        .IsUnique();

                    b.ToTable("Models");
                });

            modelBuilder.Entity("GuiaTuristicaManager.Models.Place", b =>
                {
                    b.Property<int>("PlaceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<string>("PathPattern");

                    b.Property<int>("ZoneId");

                    b.HasKey("PlaceId");

                    b.HasIndex("ZoneId");

                    b.ToTable("Places");
                });

            modelBuilder.Entity("GuiaTuristicaManager.Models.Zone", b =>
                {
                    b.Property<int>("ZoneId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsBuild");

                    b.Property<string>("Name");

                    b.Property<string>("PathCover");

                    b.Property<string>("PathDatabase");

                    b.HasKey("ZoneId");

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("GuiaTuristicaManager.Models.Media", b =>
                {
                    b.HasOne("GuiaTuristicaManager.Models.Model", "Model")
                        .WithMany("Media")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GuiaTuristicaManager.Models.Model", b =>
                {
                    b.HasOne("GuiaTuristicaManager.Models.Place", "Place")
                        .WithMany()
                        .HasForeignKey("PlaceId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GuiaTuristicaManager.Models.Place", b =>
                {
                    b.HasOne("GuiaTuristicaManager.Models.Zone", "Zone")
                        .WithMany()
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
